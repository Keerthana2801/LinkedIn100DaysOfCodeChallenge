package javaPrograms;

import java.util.Stack;

public class ValidParenthesis {

	public static boolean isValid(String s) {
		Stack<Character> stack = new Stack<>();
		for (char c : s.toCharArray()) {
			if (c == '(' || c == '[' || c == '{') {
				stack.push(c); 
			} else {
				if (stack.isEmpty()) {
					return false; 
				}

				char top = stack.pop();
				if ((c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{')) {
					return false;
				}
			}
		}

		return stack.isEmpty();
	}
	
	public static boolean isBalanced(String s) {
		 Stack<Character> stack = new Stack<>();

	        for (char c : s.toCharArray()) {
	            if (c == '(' || c == '{' || c == '[') {
	                stack.push(c);
	            } else if (c == ')' || c == '}' || c == ']') {
	                if (stack.isEmpty()) {
	                    return false;  // Unmatched closing parenthesis
	                }

	                char openParen = stack.pop();
	                if (!isMatching(openParen, c)) {
	                    return false;  // Mismatched opening and closing parentheses
	                }
	            }
	        }

	        return stack.isEmpty(); // Stack should be empty if all parentheses are balanced
    }

private static boolean isMatching(char open, char close) {
    return (open == '(' && close == ')') ||
           (open == '{' && close == '}') ||
           (open == '[' && close == ']');
}

	public static void main(String[] args) {
		String s1="{([])}";
		String s2="{2 * {3 * items[n]{2}]}";
		System.out.println(isValid(s1));
		System.out.println(isBalanced(s2));

	}
}
